#!/usr/local/bin/nush
#
# This is a rough start at a WebDAV server.
#
# Developed using the litmus WebDAV test suite: http://www.webdav.org/neon/litmus/
#
(load "RadHTTP:macros")
(load "RadXML")
(load "RadJSON")
(load "RadCrypto")
(load "RadMongoDB")

(set HTTP-200-OK "HTTP/1.1 200 OK")

(if YES
    (puts "STARTUP: REMOVE ALL PROPERTIES")
    (set mongo (RadMongoDB new))
    (mongo connect)
    (mongo removeWithCondition:(dict) fromCollection:"webdav.properties")
    (set $all (mongo findArray:nil inCollection:"webdav.properties"))
    (puts ($all description)))

(def encode (path) ((path stringByReplacingOccurrencesOfString:" " withString:"%20")
                    stringByReplacingOccurrencesOfString:"'" withString:"%27"))
(def decode (path) ((path stringByReplacingOccurrencesOfString:"%20" withString:" ")
                    stringByReplacingOccurrencesOfString:"%27" withString:"'"))

(set ROOT "/var/webdav")

(def server (request)
     (+ (request scheme) "://" ((request headers) Host:)))

(get "/server"
     (+ "http://" ((REQUEST headers) Host:)))

(get "/owncloud/remote.php/webdav"
     (puts ((REQUEST headers) description))
     (set authorization ((REQUEST headers) Authorization:))
     (puts authorization)
     (set parts (authorization componentsSeparatedByString:" "))
     (set b64 (parts 1))
     (set data (NSData dataWithBase64EncodedString:b64))
     (set pair ((NSString alloc) initWithData:data encoding:NSUTF8StringEncoding))
     (puts pair)
     nil)

(get "/owncloud/status.php"
     (set response (dict installed:"true"
                           version:"6.0.2.2"
                     versionstring:"6.0.2"
                           edition:""))
     (response JSONRepresentation))


(def file-exists (path)
     ((NSFileManager defaultManager) fileExistsAtPath:path))

(get "/*path:"
     (puts "GET")
     (puts (REQUEST path))
     (puts "server #{(server REQUEST)}")
     (set pathToGet (+ ROOT "/" *path))
     (puts pathToGet)
     (set attributes ((NSFileManager defaultManager)
                      attributesOfItemAtPath:pathToGet error:nil))
     (cond ((not attributes)
            (RESPONSE setStatus:404)
            "Not found")
           ((eq (attributes NSFileType:) "NSFileTypeDirectory")
            (set files ((NSFileManager defaultManager)
                        contentsOfDirectoryAtPath:(+ ROOT "/" *path) error:nil))
            (&html (&body (&ul
                              (files map:(do (file) (&li file)))))))
           (else (set data (NSData dataWithContentsOfFile:(+ ROOT "/" *path)))
                 (if data
                     (then data)
                     (else "")))))

(put "/*path:"
     (set pathToWrite (+ ROOT "/" *path))
     (cond ((not (file-exists (pathToWrite stringByDeletingLastPathComponent)))
            (puts "putting into a nonexistent directory: #{pathToWrite}")
            (RESPONSE setStatus:409)
            "")
           (else
                (set localPath (+ ROOT "/" *path))
                (set dataToWrite (REQUEST body))
                (unless dataToWrite (set dataToWrite (NSData new)))
                (puts "writing #{(dataToWrite length)} bytes to #{localPath}")
                (dataToWrite writeToFile:localPath atomically:NO)
                (RESPONSE setStatus:201)
                "ok")))

(delete "/*path:"
        (puts "DELETE #{*path}")
        (set pathToDelete (+ ROOT "/" *path))
        (cond ((not (file-exists pathToDelete))
               (RESPONSE setStatus:404)
               "")
              (else
                   (set fragment ((REQUEST URL) fragment))
                   (if (and fragment (fragment length))
                       (then (response setStatus:409)
                             "deleting path with nonempty fragment")
                       (else
                            (puts "deleting #{pathToDelete}")
                            ((NSFileManager defaultManager) removeItemAtPath:pathToDelete error:0)
                            (delete-properties pathToDelete)
                            "ok")))))

(options "/*path:"
         (RESPONSE setValue:"OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, ORDERPATCH"
              forHTTPHeader:"Allow")
         (RESPONSE setValue:"1, 2"
              forHTTPHeader:"DAV")
         "")

(send &D:resourcetype setEmpty:YES)
(send &D:collection setEmpty:YES)

(macro &MARKUP (tag *stuff)
       `(progn (set operator (NuMarkupOperator operatorWithTag:,tag))
               (operator ,@*stuff)))

(def CDATA (value)
     (+ "<![CDATA[" value "]]>"))

(set getters (array (dict name:"{DAV:}creationdate"
                         block:(do (path attributes)
                                   (&D:creationdate ((attributes NSFileCreationDate:) rfc1123String))))
                    (dict name:"{DAV:}displayname"
                         block:(do (path attributes)
                                   (&D:displayname path)))
                    (dict name:"{DAV:}getcontentlanguage"
                         block:(do (path attributes)
                                   (&D:getcontentlanguage "en")))
                    (dict name:"{DAV:}getcontentlength"
                         block:(do (path attributes)
                                   (&D:getcontentlength (attributes NSFileSize:))))
                    (dict name:"{DAV:}getcontenttype"
                         block:(do (path attributes)
                                   (if (eq (attributes NSFileType:) "NSFileTypeDirectory")
                                       (then nil)
                                       (else (&D:getcontenttype "text")))))
                    (dict name:"{DAV:}getetag"
                         block:(do (path attributes)
                                   (&D:getetag "00000000001")))
                    (dict name:"{DAV:}getlastmodified"
                         block:(do (path attributes)
                                   (&D:getlastmodified ((attributes NSFileModificationDate:) rfc1123String))))
                    (dict name:"{DAV:}resourcetype"
                         block:(do (path attributes)
                                   (&D:resourcetype (if (eq (attributes NSFileType:) "NSFileTypeDirectory")
                                                        (then (&D:collection))
                                                        (else nil)))))
                    (dict name:"{DAV:}lockdiscovery"
                         block:(do (path attributes)
                                   (&D:lockdiscovery "")))
                    (dict name:"{DAV:}source"
                         block:(do (path attributes)
                                   (&D:source "")))
                    (dict name:"{DAV:}supportedlock"
                         block:(do (path attributes)
                                   (&D:supportedlock "")))
                    (dict name:"{DAV:}quota"
                         block:(do (path attributes)
                                   (&D:quota 9999999)))
                    (dict name:"{DAV:}quotaused"
                         block:(do (path attributes)
                                   (&D:quotaused 9999)))
                    (dict name:"{DAV:}quota-available-bytes"
                         block:(do (path attributes)
                                   (&D:quota-available-bytes 9990000)))
                    (dict name:"{DAV:}quota-used-bytes"
                         block:(do (path attributes)
                                   (&D:quota-used-bytes 9999)))
                    (dict name:"{DAV:}lockdiscovery"
                         block:(do (path attributes)
                                   (&D:what)
                                   ))
                    ))

(def getter-with-key (key)
     (puts "searching for getter with key #{key}")
     (set g nil)
     (getters each:
              (do (getter)
                  (if (eq (getter name:) key) (set g getter))))
     (puts "found #{(g description)}")
     g)


(def get-propstats (command path properties)
     (set localname (+ ROOT "/" path))
     (set attributes ((NSFileManager defaultManager)
                      attributesOfItemAtPath:localname error:nil))
     (puts "ATTRIBUTES")
     (puts (attributes description))
     (set propstats "")
     
     (set mongo (RadMongoDB new))
     (mongo connect)
     
     (set chosen-getters (array))
     (if (command)
         (then ((command children) each:
                (do (prop)
                    (puts "PROP")
                    (puts (prop name))
                    (if (eq (prop universalName) "{DAV:}allprop")
                        (set chosen-getters getters))
                    (if (eq (prop universalName) "{DAV:}prop")
                        ((prop children) each:
                         (do (keyNode)
                             (set key (keyNode universalName))
                             (if (set getter (getter-with-key key))
                                 (then
                                      (getter localName:(keyNode localName))
                                      (getter namespaceURI:(keyNode namespaceURI))
                                      (chosen-getters addObject:getter))
                                 (else
                                      (set getter (dict name:key
                                                   localName:(keyNode localName)
                                                namespaceURI:(keyNode namespaceURI)
                                                       block:(do (path attributes)
                                                                 (set pathkey (+ path " " key))
                                                                 ;(puts "running GETTER for #{pathkey}")
                                                                 (set property (mongo findOne:(dict pathkey:pathkey) inCollection:"webdav.properties"))
                                                                 ;(puts (property description))
                                                                 (if property
                                                                     (then (set value (property value:))
                                                                           (&MARKUP (property keyLocalName:)
                                                                                    xmlns:(property keyNamespaceURI:) value))
                                                                     (else nil)))))
                                      (chosen-getters addObject:getter)
                                      ))))))))
         (else (set chosen-getters getters)))
     
     ;(puts "GETTERS")
     ;(puts (chosen-getters description))
     
     (chosen-getters each:
                     (do (getter)
                         (if (set prop ((getter block:) path attributes))
                             (then (propstats appendString:(&D:propstat (&D:prop prop)
                                                            (&D:status HTTP-200-OK))))
                             (else (propstats appendString:(&D:propstat (&D:prop (&MARKUP (getter localName:) xmlns:(getter namespaceURI:)))
                                                            (&D:status "HTTP/1.1 404 Not Found")))))))
     propstats)



(propfind "/*path:"
          (puts "PROPFIND '#{*path}'")
          (if (REQUEST body) (puts (NSString stringWithData:(REQUEST body) encoding:NSUTF8StringEncoding)))
          
          
          (set properties (properties-for-path *path))
          
          
          
          (set localname (+ ROOT "/" *path))
          (set attributes ((NSFileManager defaultManager)
                           attributesOfItemAtPath:localname error:nil))
          (puts "ATTRIBUTES")
          (puts (attributes description))
          (if (eq attributes nil)
              (RESPONSE setStatus:404)
              (return "NOT FOUND"))
          
          (set depth ((REQUEST headers) Depth:))
          (puts "DEPTH: #{depth}")
          
          (set command nil)
          (set propstats nil)
          (if (REQUEST body)
              (set string (NSString stringWithData:(REQUEST body) encoding:NSUTF8StringEncoding))
              (puts string)
              
              (set reader ((RadXMLReader alloc) init))
              (set command (reader readXMLFromString:string error:nil))
              (unless command
                      (RESPONSE setStatus:400)
                      (return "invalid XML")))
          
          (if (or (eq command nil)
                  (eq (command universalName) "{DAV:}propfind"))
              (set mongo (RadMongoDB new))
              (mongo connect)
              (set propstats (get-propstats command *path properties))
              (puts propstats)
              
              (RESPONSE setStatus:207)
              (set responses "")
              (responses appendString:(&D:response (&D:href (encode (+ (server REQUEST)  "/" *path)))
                                       propstats))
              (if (eq depth "1")
                  (set files ((NSFileManager defaultManager)
                              contentsOfDirectoryAtPath:(+ ROOT "/" *path) error:nil))
                  (puts "FILES FOR LISTING")
                  (puts (files description))
                  (set pathForHREF *path)
                  (if (pathForHREF length) (set pathForHREF (+ pathForHREF "/")))
                  (files each:
                         (do (filename)
                             (set resourcename (+ (server REQUEST) "/" pathForHREF filename))
                             (set localname (+ ROOT "/" *path "/" filename))
                             (set exists ((NSFileManager defaultManager)
                                          fileExistsAtPath:localname
                                          isDirectory:(set isDirectory (NuPointer new))))
                             (set attributes ((NSFileManager defaultManager)
                                              attributesOfItemAtPath:localname error:nil))
                             (NSLog "FILE ATTRIBUTES")
                             (NSLog (attributes description))
                             (NSLog "is directory: #{(isDirectory value)}")
                             (responses appendString:(+ (&D:response
                                                         (&D:href (encode resourcename))
                                                         (get-propstats command (+ *path "/" filename) properties)))))))
              (set result (+ "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
                             (&D:multistatus xmlns:D:"DAV:" responses)))
              (RESPONSE setValue:"text/xml; charset=\"utf-8\"" forHTTPHeader:"Content-Type")
              (puts "RETURNING")
              (puts result)
              result))


(proppatch "/*path:"
           (puts "PROPPATCH")
           (set mongo (RadMongoDB new))
           (mongo connect)
           (set string (NSString stringWithData:(REQUEST body) encoding:NSUTF8StringEncoding))
           (set reader ((RadXMLReader alloc) init))
           (set command (reader readXMLFromString:string error:nil))
           (if (eq (command universalName) "{DAV:}propertyupdate")
               ((command children) each:
                (do (element)
                    (cond ((eq (element universalName) "{DAV:}set")
                           ((element children) each:
                            (do (propNode)
                                (if (eq (propNode universalName) "{DAV:}prop")
                                    ((propNode children) each:
                                     (do (keyNode)
                                         (set key (keyNode universalName))
                                         ((keyNode children) each:
                                          (do (valueNode)
                                              (set value (valueNode stringValue))
                                              (puts "saving #{key}=#{value} for path #{*path}")
                                              (set pathkey (+ *path " " key))
                                              (mongo updateObject:(dict key:key
                                                               keyLocalName:(keyNode localName)
                                                            keyNamespaceURI:(keyNode namespaceURI)
                                                                      value:value
                                                                       path:*path
                                                                    pathkey:pathkey)
                                                     inCollection:"webdav.properties"
                                                    withCondition:(dict pathkey:pathkey)
                                                insertIfNecessary:YES
                                            updateMultipleEntries:NO)))))))))
                          ((eq (element universalName) "{DAV:}remove")
                           ((element children) each:
                            (do (propNode)
                                (if (eq (propNode universalName) "{DAV:}prop")
                                    ((propNode children) each:
                                     (do (keyNode)
                                         (set key (keyNode universalName))
                                         (puts "removing value of #{key} for path #{*path}")
                                         (set pathkey (+ *path " " key))
                                         (mongo removeWithCondition:(dict pathkey:pathkey)
                                                     fromCollection:"webdav.properties")))))))
                          (else nil)))))
           
           (puts "SANITY CHECK PROPERTIES ON #{*path}")
           (set properties (mongo findArray:(dict path:*path) inCollection:"webdav.properties"))
           (puts (properties description))
           "ok")


(mkcol "/*path:"
       (puts "MKCOL #{*path}")
       (set pathToCreate (+ ROOT "/" *path))
       (cond ((file-exists pathToCreate)
              (RESPONSE setStatus:405)
              "")
             ((and (not (file-exists (pathToCreate stringByDeletingLastPathComponent)))
                   (ne (*path stringByDeletingLastPathComponent) ""))
              (puts (+ "'" (pathToCreate stringByDeletingLastPathComponent) "' doesn't exist"))
              (RESPONSE setStatus:409)
              "")
             (((REQUEST body) length)
              (RESPONSE setStatus:415)
              "")
             (else (puts "creating #{pathToCreate}")
                   ((NSFileManager defaultManager) createDirectoryAtPath:pathToCreate withIntermediateDirectories:YES attributes:nil error:0)
                   (RESPONSE setStatus:201)
                   pathToCreate)))

;; transfer properties from source path to destination path
(def copy-properties (source destination)
     (set mongo (RadMongoDB new))
     (mongo connect)
     (set properties (mongo findArray:(dict path:source) inCollection:"webdav.properties"))
     (puts "properties to move")
     (puts (properties description))
     (properties each:
                 (do (property)
                     (property path:destination
                            pathkey:(+ destination " " (property key:)))
                     (property removeObjectForKey:"_id")
                     (puts "UPDATING")
                     (puts (property description))
                     (mongo updateObject:property
                            inCollection:"webdav.properties"
                           withCondition:(dict pathkey:(property pathkey:))
                       insertIfNecessary:YES
                   updateMultipleEntries:NO)
                     (puts "MOVED PROPERTY - CHECK THE RESULTS")
                     (set check (mongo findArray:(dict pathkey:(property pathkey:)) inCollection:"webdav.properties"))
                     (puts (check description)))))

;; remove properties for a given path
(def delete-properties (path)
     (set mongo (RadMongoDB new))
     (mongo connect)
     (set properties (mongo findArray:(dict path:path) inCollection:"webdav.properties"))
     (properties each:
                 (do (property)
                     (mongo removeWithCondition:(dict _id:(property _id:)) fromCollection:"webdav.properties"))))

(copy "/*path:"
      (puts "copy #{*path}")
      (set pathToCopyFrom (+ ROOT "/" *path))
      
      (set overwrite ((REQUEST headers) Overwrite:))
      
      (set destination (decode ((REQUEST headers) Destination:)))
      (puts "DESTINATION: #{destination}")
      (set destination (destination stringByReplacingOccurrencesOfString:(+ (server REQUEST) "/") withString:""))
      (if (eq (destination characterAtIndex:(- (destination length) 1)) '/')
          (set destination (destination substringWithRange:(list 0 (- (destination length) 1)))))
      
      (set pathToCopyTo (+ ROOT "/" destination))
      (set destinationExists (file-exists pathToCopyTo))
      
      (puts "copying #{pathToCopyFrom} to #{pathToCopyTo}")
      (puts "destination exists? #{pathToCopyTo} #{destinationExists}")
      
      (cond ((and (eq overwrite "F") destinationExists)
             (puts "WE WILL NOT OVERRIDE #{pathToCopyTo}")
             (RESPONSE setStatus:412)
             "")
            ((not (file-exists (pathToCopyTo stringByDeletingLastPathComponent)))
             (set message "no destination directory: #{(pathToCopyTo stringByDeletingLastPathComponent)}")
             (RESPONSE setStatus:409)
             message)
            (else
                 ((NSFileManager defaultManager) copyItemAtPath:pathToCopyFrom toPath:pathToCopyTo error:nil)
                 (if destinationExists
                     (then (RESPONSE setStatus:204))
                     (else (RESPONSE setStatus:201)))
                 "")))

(move "/*path:"
      (puts "move #{*path}")
      (set pathToMoveFrom (+ ROOT "/" *path))
      
      (set overwrite ((REQUEST headers) Overwrite:))
      
      (set destination (decode ((REQUEST headers) Destination:)))
      (puts "DESTINATION: #{destination}")
      (set destination (destination stringByReplacingOccurrencesOfString:(+ (server REQUEST) "/") withString:""))
      (if (eq (destination characterAtIndex:(- (destination length) 1)) '/')
          (set destination (destination substringWithRange:(list 0 (- (destination length) 1)))))
      
      (set pathToMoveTo (+ ROOT "/" destination))
      (set destinationExists (file-exists pathToMoveTo))
      
      (puts "moving #{pathToMoveFrom} to #{pathToMoveTo}")
      (puts "destination exists? #{pathToMoveTo} #{destinationExists}")
      
      (cond ((and (eq overwrite "F") destinationExists)
             (RESPONSE setStatus:412)
             "")
            ((not (file-exists (pathToMoveTo stringByDeletingLastPathComponent)))
             (puts "no destination directory: #{(pathToMoveTo stringByDeletingLastPathComponent)}")
             (RESPONSE setStatus:409)
             "")
            (else
                 (if ((NSFileManager defaultManager) fileExistsAtPath:pathToMoveTo)
                     (puts "REMOVE THE DESTINATION")
                     (set ok ((NSFileManager defaultManager) removeItemAtPath:pathToMoveTo error:nil))
                     (puts "REMOVE WAS OK? #{ok}"))
                 (if (set ok ((NSFileManager defaultManager) moveItemAtPath:pathToMoveFrom toPath:pathToMoveTo error:(set perror (NuReference new))))
                     (then (copy-properties *path destination)
                           (delete-properties *path)
                           (if destinationExists
                               (then (RESPONSE setStatus:204))
                               (else (RESPONSE setStatus:201)))
                           "")
                     (else
                          (puts ((perror value) description))
                          (RESPONSE setStatus:999)
                          "")))))

(send &D:write setEmpty:YES)
(send &D:exclusive setEmpty:YES)

(def propertyfilename-for-path (path)
     (+ ROOT "/" (path stringByDeletingLastPathComponent) "/.%%" (path lastPathComponent)))

(def lockdiscovery-for-path (path)
     (set properties (properties-for-path path))
     (set lockinfo (properties lock:))
     (&D:lockdiscovery
      (&D:activelock
       (&D:locktype (lockinfo locktype:))
       (&D:lockscope (lockinfo lockscope:))
       (&D:depth 0)
       (&D:owner (lockinfo owner:))
       (&D:timeout "Second-3600")
       (&D:locktoken
        (&D:href (lockinfo token:)))
       (&D:lockroot
        (&D:href (lockinfo lockroot:))))))

(def properties-for-path (path)
     (set propertyfilename (propertyfilename-for-path path))
     (if (set propertydata (NSData dataWithContentsOfFile:propertyfilename))
         (then (propertydata propertyListValue))
         (else (dict))))

(def write-properties-for-path (properties path)
     (set propertyfilename (propertyfilename-for-path path))
     ((properties XMLPropertyListRepresentation) writeToFile:propertyfilename atomically:NO))

(lock "/*path:"
      (unless (REQUEST body)
              ;; lock refresh
              (RESPONSE setStatus:200)
              (return "unsupported lock refresh"))
      
      (set string (NSString stringWithData:(REQUEST body) encoding:NSUTF8StringEncoding))
      (puts string)
      (set reader ((RadXMLReader alloc) init))
      (set command (reader readXMLFromString:string error:nil))
      
      ;; lock properties
      (set lockscope nil)
      (set locktype nil)
      (set owner nil)
      (if (eq (command universalName) "{DAV:}lockinfo")
          ((command children) each:
           (do (element)
               (cond ((eq (element universalName) "{DAV:}lockscope")
                      (set lockscope (element stringContents)))
                     ((eq (element universalName) "{DAV:}locktype")
                      (set locktype (element stringContents)))
                     ((eq (element universalName) "{DAV:}owner")
                      (set owner (element stringContents)))
                     ))))
      
      (set token "opaquelocktoken:12341234-1234-1234-1234-1234123456")
      (set lock (dict lockscope:lockscope
                       locktype:locktype
                          token:token
                       lockroot:(+ (server REQUEST) "/" *path)
                          owner:owner))
      
      (set properties (properties-for-path *path))
      (properties lock:lock)
      (write-properties-for-path properties *path)
      
      ;; pretend valid lock
      (RESPONSE setStatus:200)
      (RESPONSE setValue:"text/xml; charset=\"utf-8\"" forHTTPHeader:"Content-Type")
      (RESPONSE setValue:token forHTTPHeader:"Lock-Token")
      
      (set lockdiscovery (lockdiscovery-for-path *path))
      
      (set result (+ "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
                     (&D:prop xmlns:D:"DAV:"
                      lockdiscovery)))
      (puts result)
      result)



(unlock "/*path:"
        (RESPONSE setStatus:204)
        (set string (NSString stringWithData:(REQUEST body) encoding:NSUTF8StringEncoding))
        (puts string)
        "")

;(RadLibEVHTPServer run)

(set s ((RadLibEVHTPServer alloc) initWithService:(RadHTTPService sharedService)))
(s setVerbose:YES)
(s run)

